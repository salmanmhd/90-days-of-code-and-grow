/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;
app.use(bodyParser.json());

const todo = [
  {
    title: 'Buy groceries',
    completed: false,
    description: 'I should buy groceries',
    id: 1,
  },
  {
    title: 'Start Waking early',
    completed: false,
    description: 'wake early and code for 2 hours',
    id: 2,
  },
];

// 1 - get all todo
app.get('/todos', (req, res) => {
  res.json(todo);
});

// 2 - get todo by ID
app.get('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  const todoItem = todo.find((obj) => obj.id === id);

  if (!todoItem) {
    return res.status(404).json({ message: 'Todo not found' });
  }

  res.status(200).json(todoItem);
});

// 3 - create new tood
app.post('/todos/', (req, res) => {
  const { title, description, completed } = req.body;

  if (!title || !description || completed === undefined) {
    return res.status(400).json({
      message: 'All fields (title, description, completed) are required.',
    });
  }

  if (
    typeof title !== 'string' ||
    typeof description !== 'string' ||
    typeof completed !== 'boolean'
  ) {
    return res.status(400).json({
      message:
        'Invalid data types. Title and description should be strings, completed should be a boolean.',
    });
  }

  if (title.length < 3 || description.length < 5) {
    return res.status(400).json({
      message:
        'Title should be at least 3 characters and description at least 5 characters long.',
    });
  }

  const existingTodo = todo.find((t) => t.title === title);
  if (existingTodo) {
    return res
      .status(400)
      .json({ message: 'A todo with this title already exists.' });
  }

  const id = todo.length + 1;
  const newTodo = { ...req.body, id: id };

  todo.push(newTodo);
  res.status(200).json(todo);
});

// 4 - update by id - response 200 OK, 404 not found
app.put('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  const updatedTodo = req.body;
  todo.map((obj, index) => {
    if (obj.id === id) {
      todo[index] = updatedTodo;
    }
  });

  res.status(200).json(todo);
});

// 5 delete
app.delete('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  if (id < 1 || id > todo.length + 1) {
    res.status(400).send('todo not found');
  }

  todo.splice(id - 1, 1);
  res.status(200).json(todo);
});

app.listen(port, () => {
  console.log(`running on ${port}`);
});

module.exports = app;
